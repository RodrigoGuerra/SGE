service: sge-backend

plugins:
  - serverless-appsync-plugin
  - serverless-webpack
  - serverless-pseudo-parameters
provider:
  name: aws
  stackName: ${self:service}-${self:provider.stage}
  runtime: nodejs14.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile,""}
  deploymentPrefix: serverless
  memorySize: 256
  timeout: 29
  versionFunctions: false
  deploymentBucket: ${self:service}-serverless-deployment-${self:provider.stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "kms:Decrypt"
      Resource: "*"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: "*"
    - Effect: Allow
      Action:
        - "appsync:Create*"
        - "appsync:StartSchemaCreation"
        - "appsync:GraphQL"
        - "appsync:Get*"
        - "appsync:List*"
        - "appsync:Update*"
        - "appsync:Delete*"
      Resource: "*"

  stackTags:
    Environment: ${self:provider.stage}
    Application: ${self:custom.application}
    Owner: rodrigo
    BusinessArea: education
    Group: product
    Network: own
    Legacy: 'no'

  environment: ${file(aws/serverless/environment.yml):environment}

  vpc:
    securityGroupIds:
      - ${self:custom.awsSecurityGroupId.${self:provider.stage}}
    subnetIds: ${self:custom.awsSubnetIds.${self:provider.stage}}

package:
  # Note: include and exclude is filled by serverless-webpack
  # The final zip only contains all.js and all.js.map
  individually: false
  excludeDevDependencies: false

functions:  
  queryHealthCheck: ${file(aws/serverless/query-healthCheck-serverless.yml):queryGetHealthCheck.function}       
  

# resources:
#   Resources:
#     ${file(aws/serverless/resources.yml)}

  # Outputs:
  #   ApiUrl:
  #       Description: Api URL GraphQL
  #       Value: https://${self:custom.domain}/graphql
  #       Export:
  #         Name: !Sub "#{AWS::StackName}-apiurl"

custom:
  application: ${opt:application, 'sge'}
  prefix: ${self:custom.application}-${self:provider.stage}
  appSync: ${file(aws/serverless/appsync.yml)}
  ssm: ${self:custom.application}/${self:provider.stage}
  stages:
    - dev
    - qas
    - hmg
    - prd

  awsSubnetIds:
    dev: # VPC-Default Private subnets
      - subnet-0287aed4abb63c93e
      - subnet-0d6c94ada7161fc2e
    prd:
      - subnet-0287aed4abb63c93e
      - subnet-0d6c94ada7161fc2e

  # For the lambda functions to be able to connect to the database, in the database's security group there
  # must be an inbound rule giving permission to this security group
  awsSecurityGroupId:
    dev: !ImportValue sge-dev-security-groups-LambdaSecurityGroupGroupId
    qas: !ImportValue sge-qas-security-groups-LambdaSecurityGroupGroupId
    hmg: !ImportValue sge-hmg-security-groups-LambdaSecurityGroupGroupId
    prd: !ImportValue sge-prd-security-groups-LambdaSecurityGroupGroupId

  node-env:
    dev: development
    qas: production
    hmg: production
    prd: production