type Discipline {
  # Example field (placeholder)
  disciplineId: String!
  name: String!
  createdAt: String
  updatedAt: String
  # icon: String
}

input CreateDisciplineInput {
  # Example field (placeholder)
  name: String!
}

input UpdateDisciplineInput {
  disciplineId: String!
  name: String
}
type Function {
  # Example field (placeholder)
  functionId: String!
  name: String!
  createdAt: String
  updatedAt: String
}

input CreateFunctionInput {
  # Example field (placeholder)
  name: String!
}

input UpdateFunctionInput {
  functionId: String!
  name: String
}
# type PersonFunctions {
#   # Example field (placeholder)
#   functionId: String!
#   name: String!
#   createdAt: String
#   updatedAt: String
# }

# input CreateFunctionInput {
#   # Example field (placeholder)
#   name: String!
# }

# input UpdateFunctionInput {
#   functionId: String!
#   name: String
# }
type Person {
  # Example field (placeholder)
  personId: String!
  email: String!
  name: String
  phone: String
  age: Int
  status: String
  createdAt: String
  updatedAt: String
  user: User
  discipline: Discipline
  # icon: String
}

enum StatusEnum {
  ATIVO
  PENDENTE
  CANCELADO
}

input CreatePersonInput {
  # Example field (placeholder)
  personId: String!
  email: String!
  name: String
  phone: String
  age: Int
  status: String
}

input UpdatePersonInput {
  personId: String!
  email: String!
  name: String
  phone: String
  age: Int
  status: String
}
type Role {
  roleId: Int!
  roleName: String!
  canCreateStudent: Boolean
  canReadStudent: Boolean
  canUpdateStudent: Boolean
  canDeleteStudent: Boolean
  canCreateEmployee: Boolean
  canReadEmployee: Boolean
  canUpdateEmployee: Boolean
  canDeleteEmployee: Boolean
  canCreateSchool: Boolean
  canReadSchool: Boolean
  canUpdateSchool: Boolean
  canDeleteSchool: Boolean
  canCreateClass: Boolean
  canReadClass: Boolean
  canUpdateClass: Boolean
  canDeleteClass: Boolean
  canCreateDiscipline: Boolean
  canReadDiscipline: Boolean
  canUpdateDiscipline: Boolean
  canDeleteDiscipline: Boolean
  canVinculateStudent: Boolean
  canVinculateEmployee: Boolean
  canVinculateClass: Boolean
  canVinculateDiscipline: Boolean
  createdAt: String
  updatedAt: String
}type Query {
  userByEmail(email: String!): User
  functionByName(name: String!): Function
  personByEmail(email: String!): Person
  disciplineByName(name: String!): Discipline
  teamByName(name: String!): Team
  schoolByName(name: String!): School
  schoolsByManager(managerUserId: String!): [School]
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User
  createFunction(createFunctionInput: CreateFunctionInput!): Function!
  updateFunction(updateFunctionInput: UpdateFunctionInput!): Function!
  removeFunction(id: Int!): Function
  createPerson(createPersonInput: CreatePersonInput!): Person!
  updatePerson(updatePersonInput: UpdatePersonInput!): Person!
  removePerson(id: Int!): Person
  createDiscipline(createDisciplineInput: CreateDisciplineInput!): Discipline!
  updateDiscipline(updateDisciplineInput: UpdateDisciplineInput!): Discipline!
  removeDiscipline(id: Int!): Discipline
  createTeam(createTeamInput: CreateTeamInput!): Team!
  updateTeam(updateTeamInput: UpdateTeamInput!): Team!
  removeTeam(id: Int!): Team
  createSchool(createSchoolInput: CreateSchoolInput!): School!
  updateSchool(updateSchoolInput: UpdateSchoolInput!): School!
  removeSchool(id: Int!): School
}
type School {
  # Example field (placeholder)
  schoolId: String!
  name: String!
  managerId: String!
  createdAt: String
  updatedAt: String
  # icon: String
}

input CreateSchoolInput {
  # Example field (placeholder)
  name: String!
}

input UpdateSchoolInput {
  schoolId: String!
  name: String
}
type Team {
  # Example field (placeholder)
  teamId: String!
  name: String!
  createdAt: String
  updatedAt: String
  discipline: Discipline
  # icon: String
}

enum StatusEnum {
  ATIVO
  PENDENTE
  CANCELADO
}

input CreateTeamInput {
  # Example field (placeholder)
  teamId: String!
  name: String!
}

input UpdateTeamInput {
  teamId: String!
  name: String!
}
type HealthCheckType{
    status:Int,
    message:String
}
type User {
  # Example field (placeholder)
  userId: String!
  email: String!
  name: String!
  createdAt: String
  updatedAt: String
  roleId: Int!
  role: Role
  # icon: String
}

input CreateUserInput {
  # Example field (placeholder)
  email: String!
  name: String!
  roleId: Int!
}

input UpdateUserInput {
  userId: String!
  email: String
  name: String
}
